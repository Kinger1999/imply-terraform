#!/bin/bash -u
set -o pipefail

WHEREAMI="$(dirname "$0")"
export TF_IN_AUTOMATION=1
export TF_INPUT=0
export TF_CLI_ARGS="-no-color"
IMPLY_LOG_FILE="imply-install.log"
VERSION="66dd862"
GOOGLE_AUTH_LOCATION="$HOME/.config/gcloud/application_default_credentials.json"

SUPPORTED_REGIONS=(
  "asia-east1"
  "asia-southeast1"
  "europe-west1"
  "europe-west4"
  "us-central1"
  "us-east1"
  "us-east4"
)

##
# Utility Functions
##

log_and_exit() {
  local exitCode="$1"
  shift

  printf "%s\n" "$@" >&2
  exit "$exitCode"
}

print_prompt() {
  local message="$1"
  local default="$2"

  if [ -n "$default" ]; then
    ((${#default} > 30)) && default="${default:0:27}..."
    printf "%s [%s]: " "$message" "$default"
  else
    printf "%s: " "$message"
  fi
}

prompt_with_default() {
  local message="$1"
  local default="$2"
  local var_name=$3
  local validator="${4:-}"
  local input

  print_prompt "$1" "$2"

  read -r input
  input=${input:-$default}

  while [ -n "$validator" ] && [[ ! "${input:-}" =~ $validator ]]; do
    echo "Invalid, please try again"
    print_prompt "$1" "$2"
    read -r input
    input=${input:-$default}
  done

  read -r "${var_name?}" <<<"${input:-$default}"
}

prompt_for_secret() {
  local message="$1"
  local default="$2"
  local var_name=$3
  local input

  print_prompt "$message" "${default:+********}"
  read -rs input

  read -r "${var_name?}" <<<"${input:-$default}"
}

prompt_with_yn() {
  local message="$1"
  local default="$2"
  local var_name="$3"
  local input

  print_prompt "$1" "$2"
  read -r input

  if [[ "${input:-$default}" =~ ^[Yy] ]]; then
    read -r "${var_name?}" <<<"yes"
    return 0
  fi

  read -r "${var_name?}" <<<"no"
  return 1
}

get_index() {
  local i
  local match="$1"
  shift
  local -a items=("$@")

  for i in "${!items[@]}"; do
    [ "${items[$i]}" == "$match" ] && echo "$((i + 1))" && return
  done

  echo "-1"
}

select_with_default() {
  local message="$1"
  local default="$2"
  local var_name="$3"
  shift 3
  local -a items=("$@")
  local numItems=${#items[@]}
  local i=0
  local item index

  for item in "${items[@]}"; do
    printf '%d) %s\n' "$((++i))" "$item"
  done

  while :; do
    prompt_with_default "$message" "${default:-}" index
    # Continue if nothing is set
    [ -z "$index" ] && continue
    # If index is not a number, try to find the index
    if ! [[ "$index" =~ ^[0-9]+$ ]]; then
      index="$(get_index "$index" "${items[@]}")"
    fi

    ((index >= 1 && index <= numItems)) && break
  done

  read -r "${var_name?}" <<<"${items[*]:((index - 1)):1}"
}

##
# Functions
##

set_default_values() {
  local state states line
  local -a workspaces

  if [ -n "${project_id:-}" ] && gsutil ls "gs://imply-${project_id}-state/" &>/dev/null; then
    initialize_terraform &>/dev/null || log_and_exit 4 "Failed to initialize deployment."
    states="$(run_terraform workspace list 2>/dev/null | sed 's/[ \*]*//g')" || log_and_exit 4 "Failed to list deployments."
    [ -n "$states" ] && while IFS='' read -r line; do workspaces+=("$line"); done <<<"$states"

    if [ ${#workspaces[@]} -gt 0 ]; then
      workspaces=("New" "${workspaces[@]}")
      select_with_default "Select existing deployment to manage or New to create one" New workspace "${workspaces[@]}"
    fi

    if [ "$workspace" != "New" ]; then
      run_terraform workspace select "$workspace" &>/dev/null || log_and_exit 14 "Failed to select deployment."
      state="$(run_terraform output -json 2>/dev/null | jq -r 'to_entries[]|"\(.key)=\(.value.value | @sh)"')" || log_and_exit 14 "Failed to initialize state."
      if [ -n "$state" ]; then
        eval "$state"
        state_exists="true"
      fi
    elif [ "$workspace" == "New" ]; then
      echo
      echo "Deployment names should be all lower case and contain only letters, numbers or dashes and"
      echo "be between 3 and 10 characters in length."
      echo "For example my-test-1"
      prompt_with_default "Enter a name for the new deployment" "" workspace '^[a-z0-9][a-z0-9-]{1,8}[a-z0-9]$'

      run_terraform workspace new "$workspace" &>/dev/null || log_and_exit 13 "Failed to initialize deployment."
    else
      log_and_exit 15 "Failed to initialize deployment."
    fi
  fi

  # First run defaults
  workspace="${workspace:-default}"
  [ -n "${zone:-}" ] && is_multizone="no" || is_multizone="yes"
  [ -n "${vpc:-}" ] && is_new_vpc="no" || is_new_vpc="yes"
  [ -n "${sql_endpoint:-}" ] && is_new_sql="no" || is_new_sql="yes"
  [ -n "${dns_zone:-}" ] && is_using_ingress="yes" || is_using_ingress="no"
  [ -f "$(pwd)/imply.tfvars" ] && tfvars_path="$(pwd)/imply.tfvars"
  # If they have a default region set, use it.
  region="${region:-us-central1}"
}

do_wizard() {
  prompt_with_default "Enter your Imply License (blank for trial)" "${license:-}" license '^(\{\"name\":.*|$)'

  if [ -z "${state_exists:-}" ]; then
    echo
    select_with_default "Select a region" "${region}" region "${SUPPORTED_REGIONS[@]}"
  fi

  echo
  echo "Running in multiple zones will create all resources with"
  echo "redundancies in multiple GCP zones. Resources such as optionally"
  echo "created MySQL and the Kubernetes cluster will have redundancy"
  echo "configured across these nodes. This is recommended in production."
  if ! prompt_with_yn "Run in multiple zones?" "${is_multizone}" is_multizone; then
    echo "Determining available zones..."
    IFS=" " read -ra zones <<<"$(
      gcloud compute zones list \
        --filter="region:$region" \
        --format='value[terminator=" "](name)' \
        --project="$project_id" \
        2>/dev/null
    )"
    [ "${#zones[@]}" -eq 0 ] && log_and_exit 5 "Could not determine available zones."
    select_with_default "Select a zone" "${zone:-}" zone "${zones[@]}"
  else
    unset zone
  fi

  echo
  echo "Creating a separate VPC is recommended but if you require"
  echo "the Imply cluster to run in an existing VPC to be able to"
  echo "access resources that cannot otherwise be access you can"
  echo "select an existing VPC."
  echo "Note: When using an existing VPC please ensure that private"
  echo "service networking is enabled to allow the Imply cluster"
  echo "to communicate with GCP services."
  if ! prompt_with_yn "Create a new VPC" "${is_new_vpc}" is_new_vpc; then
    is_new_vpc="no"
    echo "Determining available VPCs..."

    IFS=" " read -ra vpcs <<<"$(
      gcloud compute networks list \
        --format='value[terminator=" "](name)' \
        --project="$project_id" \
        2>/dev/null
    )"
    [ "${#vpcs[@]}" -eq 0 ] && log_and_exit 6 "Could not determine available vpcs."
    select_with_default "Select a VPC" "${vpc:-}" vpc "${vpcs[@]}"
  else
    unset vpc
  fi

  prompt_with_default "CIDR Range for the Imply Cluster to use" "10.128.0.0/16" cidr '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  echo
  echo "Enter a bucket to use as Deep Storage for Imply or preferably"
  echo "have one created for use with Imply."
  echo "Note: If a bucket is created it will not be removed on uninstall"
  echo "as will have to be removed manually."
  echo "Example existing bucket: gs://my-bucket-1"
  prompt_with_default "Existing GCS bucket or New" "${bucket:-New}" bucket '^New|gs://.*'
  [ "$bucket" == "New" ] && bucket=""

  echo
  echo "Creating a MySQL Cloud SQL for use by the Imply Manager and"
  echo "as a default for clusters created by it is recommended. If"
  echo "you required the Imply Manager to use an existing MySQL"
  echo "database you can choose to enter those details instead."
  echo "Note: The stored Terraform state as well as installer"
  echo "state may store your sql connection information in plain"
  echo "text inside a GCS bucket in your account."
  if ! prompt_with_yn "Create a new MySQL database" "${is_new_sql}" is_new_sql; then
    is_new_sql="no"
    prompt_with_default "Enter the IP/Hostname of the database" "${sql_endpoint:-}" sql_endpoint
    prompt_with_default "Enter the username to connect to the database with" "${sql_username:-}" sql_username
    prompt_for_secret "Enter the password to connect to the database with" "${sql_password:-}" sql_password
  else
    unset sql_endpoint sql_username sql_password
  fi

  echo
  echo "Ingress can be automatically configured using Cloud DNS"
  echo "and Google Managed Certiciates to allow secure connections"
  echo "to the Imply Manager. This feature requires that a Cloud DNS"
  echo "managed zone already exist. For more information on setting"
  echo "up a Cloud DNS zone see:"
  echo "https://cloud.google.com/dns/docs/zones"
  if prompt_with_yn "Automatically setup ingress" "${is_using_ingress}" is_using_ingress; then
    echo "Determining available Cloud DNS Managed Zones"

    IFS=" " read -ra dns_zones <<<"$(
      gcloud dns managed-zones list \
        --filter="visibility:public" \
        --format='value[terminator=" "](name)' \
        --project="$project_id" \
        2>/dev/null
    )"
    [ "${#dns_zones[@]}" -eq 0 ] && log_and_exit 5 "Could not determine available dns zones."
    select_with_default "Select a zone" "${dns_zone:-}" dns_zone "${dns_zones[@]}"
  else
    unset dns_zone
  fi
}

confirm_values() {
  echo
  printf "%-12s %s\n" "License:" "$license"
  printf "%-12s %s\n" "Project ID:" "$project_id"
  printf "%-12s %s\n" "Region:" "$region"
  printf "%-12s %s\n" "Zone:" "${zone:-[Multizone]}"
  printf "%-12s %s\n" "VPC:" "${vpc:-[Created]}"
  printf "%-12s %s\n" "CIDR:" "${cidr:?}"
  printf "%-12s %s\n" "Bucket:" "${bucket:-[Created]}"
  printf "%-12s %s\n" "MySQL:" "${sql_endpoint:-[Created]}"
  printf "%-12s %s\n" "Ingress:" "${is_using_ingress}"
  echo

  prompt_with_yn "Is the above information correct" yes correct
}

run_terraform() {
  (cd "$WHEREAMI/../terraform" && terraform "$@")
}

initialize_terraform() {
  TF_WORKSPACE="default" run_terraform init \
    -reconfigure \
    -backend-config="bucket=imply-${project_id}-state"
}

uninstall_imply() {
  echo
  echo "Removing resources:"

  run_terraform destroy \
    -auto-approve \
    -var="license=${license:-}" \
    -var="project_id=${project_id:-}" \
    -var="region=${region}" \
    -var="cidr_range=${cidr}" \
    -var="zone=${zone:-}" \
    -var="vpc_id=${vpc:-}" \
    -var="bucket=${bucket:-}" \
    -var="dns_zone=${dns_zone:-}" \
    -var="sql_endpoint=${sql_endpoint:-}" \
    -var="sql_username=${sql_username:-}" \
    -var="sql_password=${sql_password:-}" \
    ${tfvars_path+-var-file="$tfvars_path"} |
    tee -a "$IMPLY_LOG_FILE" 2>&1 ||
    log_and_exit 9 "Failed to uninstall."

  if [ "$workspace" != "default" ]; then
    { run_terraform workspace select default &>/dev/null &&
      run_terraform workspace delete "$workspace" &>/dev/null; } ||
      log_and_exit 11 "Something went wrong :("
  fi

  exit 0
}

install_imply() {
  echo
  echo "Creating configured resources:"

  run_terraform apply \
    -auto-approve \
    -var="license=${license:-}" \
    -var="project_id=${project_id:-}" \
    -var="region=${region}" \
    -var="cidr_range=${cidr}" \
    -var="zone=${zone:-}" \
    -var="vpc_id=${vpc:-}" \
    -var="bucket=${bucket:-}" \
    -var="dns_zone=${dns_zone:-}" \
    -var="sql_endpoint=${sql_endpoint:-}" \
    -var="sql_username=${sql_username:-}" \
    -var="sql_password=${sql_password:-}" \
    ${tfvars_path+-var-file="$tfvars_path"} |
    tee -a "$IMPLY_LOG_FILE" 2>&1 ||
    log_and_exit 8 "Failed to install."
}

create_state_bucket() {
  echo
  echo "Creating gs://imply-${project_id}-state for install state"
  echo "management so upgrades can be planned accordingly in the"
  echo "future."

  if gsutil ls "gs://imply-${project_id}-state" &>/dev/null; then
    return 0
  fi

  gsutil mb -p "$project_id" -l "$region" -b on "gs://imply-${project_id}-state" \
    &>/dev/null ||
    log_and_exit 10 "Could not create remote state bucket."

  initialize_terraform &>/dev/null || log_and_exit 15 "Could not initialize remote state."
}

##
# Validation
##

validate() {
  if ! command -v gcloud &>/dev/null; then
    log_and_exit 1 \
      "gcloud command not found." \
      "Please install the Google Cloud SDK before continuing." \
      "See https://cloud.google.com/sdk/docs for instructions."
  fi

  if ! command -v terraform &>/dev/null; then
    log_and_exit 2 \
      "terraform command not found." \
      "Please install Terraform before continuing." \
      "See https://www.terraform.io/downloads.html for instructions."
  fi

  if ! command -v jq &>/dev/null; then
    log_and_exit 7 \
      "jq command not found." \
      "Please install jq before continuing." \
      "See https://stedolan.github.io/jq/download for instructions."
  fi

  if [ "${CLOUD_SHELL:-false}" == "false" ]; then
    if [ -z "${GOOGLE_APPLICATION_CREDENTIALS:-}" ] &&
      [ ! -f "$GOOGLE_AUTH_LOCATION" ]; then
      log_and_exit 12 \
        "Google Authentication is not setup." \
        "Run: gcloud auth application-default login" \
        "or configure credentials manually." \
        "See: https://cloud.google.com/docs/authentication/production for more info."
    fi
    echo "Note: For the best experience run in Google Cloud Shell."
    echo "See https://cloud.google.com/shell for details."
    echo
  fi
}

##
# Main Script
##

main() {
  validate
  echo "Welcome to the Imply GCP Installer. (build $VERSION)

This installer will guide you through setting up the required Google
Cloud Platform resources for running a managed Imply install in GCP
on Kuberntes.
"

  # Set project id upfront so we can load the state
  projects=$(
    gcloud projects list \
      --format='value[terminator=" "](project_id)' \
      2>/dev/null
  ) || log_and_exit 3 "Could not determine available projects."
  IFS=" " read -r -a projects <<<"$projects"
  # Set the default if it's set
  project_id="$(gcloud config list --format='value(core.project)' 2>/dev/null)"
  select_with_default "Select the Google Project ID" "${project_id:-}" project_id "${projects[@]}"

  set_default_values

  if [ -n "${state_exists:-}" ]; then
    if prompt_with_yn "An existing deployment was found, update?" yes update; then
      confirm_values && reuse="yes"
    elif prompt_with_yn "Uninstall deployment?" no uninstall; then
      uninstall_imply && return 0
    else
      return 0
    fi
  fi

  while [ -z "${reuse:-}" ]; do
    do_wizard
    confirm_values && break
  done

  [ -z "${state_exists:-}" ] && create_state_bucket

  install_imply

  echo
  if [ "${is_using_ingress:-}" == "yes" ]; then
    echo "You can access your Imply Manager at:"
    echo "https://$(run_terraform output dns_host)"
    echo "Note: It may take 15-20 minutes for the SSL certificate to be generated"
    echo "and during that time you may see a certificate error."
  else
    echo "You can access your Imply Manager by running:"
    printf "  gcloud container clusters get-credentials %s --region %s\n" \
      "$(run_terraform output gke_id)" \
      "${zone:-$region}"
    echo "to get the credentials for the Kubernetes cluster and then:"
    printf "  kubectl port-forward svc/%s 9097\n" \
      "imply-${workspace}-manager-int"
    echo "Then visit http://localhost:9097"
  fi
}

# only run if not sourced to support tests.
(return 0 2>/dev/null) || main
